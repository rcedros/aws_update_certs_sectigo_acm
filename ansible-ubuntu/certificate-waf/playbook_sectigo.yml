# AWS playbook
---

# Generate the CSR and the private key using the name of the application to be updated.

# Store the CSR and the private key in Vault.

# Generate the certificate via Sectigo and store it in Vault.

# Update or upload the certificate using the tag name in ACM or WAF.

# Create the certificate rollback process.

#Sectigo profile SSL code: Wildcard: 3944, SSL PÃºblico: 3940, SSL privado: 3946

- hosts: localhost

  vars_files:
    - vault.yml

  tasks:
    - name: Generate an OpenSSL private key with the default values (2048 bits, RSA)
      community.crypto.openssl_privatekey_pipe:
        content: "{{ sectigo_cert }}"
        size: 2048
        format: pkcs8
      register: "{{ privkey }}"

    - name: Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr_pipe:
        privatekey_content: "{{ privkey.privatekey }}"
        common_name: "{{ sectigo_cert }}"
      register: "{{ csr }}"

    - name: Enroll SSL certificate Sectigo
      uri:
        url: "{{ sectigo_enroll }}"
        method: POST
        headers:
          Content-Type: application/json
          login: "{{ sectigo_login }}"
          password: "{{ sectigo_password }}"
          customerUri: neon
        body_format: json
        body:
          orgId: 10750
          subjAltNames: "{{ sectigo_cert }}"
          certType: "{{ sectigo_profile }}"
          term: 365
          comments: issued by Ansible
          externalRequester:
          csr: "{{ csr.csr }}"
      register: reqcert

    - name: Approve SSL certificate
      uri:
        url: "{{ sectigo_approve }}{{ reqcert['json']['sslId'] }}"
        method: POST
        headers:
          Content-Type: application/json
          login: "{{ sectigo_login }}"
          password: "{{ sectigo_password }}"
          customerUri: neon
        body_format: json
        body:
          message: issued by Ansible
      register: issued
      failed_when: issued.status != 204
      retries: 3
      delay: 15
      until: issued is not failed

    - name: Collect SSL certificate
      uri:
        url: "{{ sectigo_collect }}{{ reqcert['json']['sslId'] }}?format=x509CO"
        method: GET
        headers:
          login: "{{ sectigo_login }}"
          password: "{{ sectigo_password }}"
          customerUri: neon
        return_content: true
      register: pubkey
      retries: 3
      delay: 5
      until: pubkey is not failed

    - name: Collect SSL certificate
      uri:
        url: "{{ sectigo_collect }}{{ reqcert['json']['sslId'] }}?format=x509IOR"
        method: GET
        headers:
          login: "{{ sectigo_login }}"
          password: "{{ sectigo_password }}"
          customerUri: neon
        return_content: true
      register: chain_ca
      retries: 3
      delay: 5
      until: chain_ca is not failed

    - name: Write secret to VAULT using key value V2 engine
      community.hashi_vault.vault_write:
        url: "{{ vault_url }}"
        path: "{{vault_path}}{{ sectigo_cert_name }}"
        auth_method: ldap
        username: "{{ vault_user }}"
        password: "{{ vault_password }}"
        data:
          data:
            public_key: "{{ pubkey.content }}"
            private_key: "{{ privkey.privatekey }}"
            csr: "{{ csr.csr }}"
            chain: "{{ chain_ca.content }}"
